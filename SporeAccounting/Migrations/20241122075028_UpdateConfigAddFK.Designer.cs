// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SporeAccounting;

#nullable disable

namespace SporeAccounting.Migrations
{
    [DbContext(typeof(SporeAccountingDBContext))]
    [Migration("20241122075028_UpdateConfigAddFK")]
    partial class UpdateConfigAddFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SporeAccounting.Models.Config", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ConfigTypeEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Config");
                });

            modelBuilder.Entity("SporeAccounting.Models.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = "bb7b12c5-f27f-4a9c-a4da-23217fa73d18",
                            Abbreviation = "CNY",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8184),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "人民币"
                        },
                        new
                        {
                            Id = "8332caf8-3254-4ac6-94ca-c1b087971fd8",
                            Abbreviation = "USD",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8192),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "美元"
                        },
                        new
                        {
                            Id = "71255818-d425-4434-a738-d2c8ba91936d",
                            Abbreviation = "EUR",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8199),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "欧元"
                        },
                        new
                        {
                            Id = "a222ef91-3d14-4ab7-a420-070e45f98630",
                            Abbreviation = "JPY",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8223),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "日元"
                        },
                        new
                        {
                            Id = "223585cd-6aeb-45d7-905b-72b8436f5b20",
                            Abbreviation = "GBP",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8229),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "英镑"
                        },
                        new
                        {
                            Id = "9393effb-a8fd-4137-8e16-7d136c9e7efe",
                            Abbreviation = "MOP",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8239),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "澳门币"
                        },
                        new
                        {
                            Id = "80089623-fb46-46af-b985-56bcae0107d3",
                            Abbreviation = "HKD",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8245),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "港元"
                        },
                        new
                        {
                            Id = "e722bcee-fcfc-42d3-9c86-fc6266332300",
                            Abbreviation = "KRW",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8252),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "韩圆"
                        },
                        new
                        {
                            Id = "8685366a-d3dd-4bb9-94a3-8cf39d5c7323",
                            Abbreviation = "TWD",
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8259),
                            CreateUserId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            IsDeleted = false,
                            Name = "新台币"
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.ExchangeRateRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConvertCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureClassification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ParentClassificationId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("IncomeExpenditureClassification");

                    b.HasData(
                        new
                        {
                            Id = "cfae7fd1-0923-4dab-8456-a15bf0e706b9",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(8157),
                            CreateUserId = "e43591f8-da98-4e9e-8d65-7d96539e9bee",
                            IsDeleted = false,
                            Name = "其他",
                            Type = -1
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("SysRole");

                    b.HasData(
                        new
                        {
                            Id = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(7200),
                            CreateUserId = "e43591f8-da98-4e9e-8d65-7d96539e9bee",
                            IsDeleted = false,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = "ca4bff06-8798-4b0e-a2c4-6930653c97f8",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(7211),
                            CreateUserId = "e43591f8-da98-4e9e-8d65-7d96539e9bee",
                            IsDeleted = false,
                            RoleName = "Consumer"
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRoleUrl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UrlId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UrlId");

                    b.ToTable("SysRoleUrl");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUrl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CanDelete")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SysUrl");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SysUser");

                    b.HasData(
                        new
                        {
                            Id = "e43591f8-da98-4e9e-8d65-7d96539e9bee",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 22, 15, 50, 27, 530, DateTimeKind.Local).AddTicks(7257),
                            CreateUserId = "e43591f8-da98-4e9e-8d65-7d96539e9bee",
                            Email = "admin@miaoshu.xyz",
                            IsDeleted = false,
                            Password = "dkpcWp/NbEnA5JJVGbGxnchw6MelCuQk+YcRl8UvpFM=",
                            PhoneNumber = "",
                            RoleId = "26fa9d1f-4aeb-4e9b-8ba3-dccabc055bf7",
                            Salt = "7731f7b158194dce98d617b0ad38d784",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.Config", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysUser", "User")
                        .WithOne("Config")
                        .HasForeignKey("SporeAccounting.Models.Config", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureClassification", b =>
                {
                    b.HasOne("SporeAccounting.Models.IncomeExpenditureClassification", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRoleUrl", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysRole", "Role")
                        .WithMany("RoleUrls")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SporeAccounting.Models.SysUrl", "Url")
                        .WithMany("RoleUrls")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUser", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureClassification", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRole", b =>
                {
                    b.Navigation("RoleUrls");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUrl", b =>
                {
                    b.Navigation("RoleUrls");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUser", b =>
                {
                    b.Navigation("Config")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
