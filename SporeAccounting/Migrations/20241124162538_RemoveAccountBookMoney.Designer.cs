// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SporeAccounting;

#nullable disable

namespace SporeAccounting.Migrations
{
    [DbContext(typeof(SporeAccountingDBContext))]
    [Migration("20241124162538_RemoveAccountBookMoney")]
    partial class RemoveAccountBookMoney
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SporeAccounting.Models.AccountBook", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountBook");
                });

            modelBuilder.Entity("SporeAccounting.Models.Config", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ConfigTypeEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("SporeAccounting.Models.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = "ecafa7ca-6c81-4a87-8758-ad1176db2f7e",
                            Abbreviation = "CNY",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7745),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "人民币"
                        },
                        new
                        {
                            Id = "0693dd76-dbfb-472c-8f29-d8c2531627e5",
                            Abbreviation = "USD",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7754),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "美元"
                        },
                        new
                        {
                            Id = "e24c196e-c8a9-4352-a55e-586118dd7eba",
                            Abbreviation = "EUR",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7760),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "欧元"
                        },
                        new
                        {
                            Id = "7e1589ba-d12d-4a09-93e3-f7a56fab4adf",
                            Abbreviation = "JPY",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7767),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "日元"
                        },
                        new
                        {
                            Id = "c50fde42-b821-4a76-b123-df091c9bea1f",
                            Abbreviation = "GBP",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7774),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "英镑"
                        },
                        new
                        {
                            Id = "4f2e4597-c50d-4ded-b2a0-7f3a0e08ea6c",
                            Abbreviation = "MOP",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7786),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "澳门币"
                        },
                        new
                        {
                            Id = "d0a53c6b-dc4a-4fd2-b8f8-f8845a472563",
                            Abbreviation = "HKD",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7793),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "港元"
                        },
                        new
                        {
                            Id = "ec65efe0-6f43-4347-b0cf-e6d707aad912",
                            Abbreviation = "KRW",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7799),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "韩圆"
                        },
                        new
                        {
                            Id = "e447f0f8-634e-44e8-b3a2-c9f3d109a112",
                            Abbreviation = "TWD",
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7806),
                            CreateUserId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            IsDeleted = false,
                            Name = "新台币"
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.ExchangeRateRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConvertCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureClassification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ParentClassificationId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("IncomeExpenditureClassification");

                    b.HasData(
                        new
                        {
                            Id = "d241c205-18c6-4b07-86d2-05035dea95b3",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(7717),
                            CreateUserId = "a3d86aeb-3eec-4c58-a98a-7b040011f416",
                            IsDeleted = false,
                            Name = "其他",
                            Type = -1
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("AccountBookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<decimal>("AfterAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BeforAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("IncomeExpenditureClassificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountBookId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IncomeExpenditureClassificationId");

                    b.HasIndex("UserId");

                    b.ToTable("IncomeExpenditureRecord");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("SysRole");

                    b.HasData(
                        new
                        {
                            Id = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(6380),
                            CreateUserId = "a3d86aeb-3eec-4c58-a98a-7b040011f416",
                            IsDeleted = false,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = "5bb40666-8842-4683-b0f7-9a4dd022689b",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(6400),
                            CreateUserId = "a3d86aeb-3eec-4c58-a98a-7b040011f416",
                            IsDeleted = false,
                            RoleName = "Consumer"
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRoleUrl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UrlId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UrlId");

                    b.ToTable("SysRoleUrl");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUrl", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CanDelete")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SysUrl");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeleteUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SysUser");

                    b.HasData(
                        new
                        {
                            Id = "a3d86aeb-3eec-4c58-a98a-7b040011f416",
                            CanDelete = false,
                            CreateDateTime = new DateTime(2024, 11, 25, 0, 25, 38, 289, DateTimeKind.Local).AddTicks(6460),
                            CreateUserId = "a3d86aeb-3eec-4c58-a98a-7b040011f416",
                            Email = "admin@miaoshu.xyz",
                            IsDeleted = false,
                            Password = "JLv8ei76H4GSj2Z1+m5yrwVj4cEjIv464wbjCu/CEKc=",
                            PhoneNumber = "",
                            RoleId = "49fe63be-c0e6-4377-a13a-94393ec71e75",
                            Salt = "63323887912b41bab5f95d9a1fb8e338",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SporeAccounting.Models.AccountBook", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysUser", "User")
                        .WithMany("AccountBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SporeAccounting.Models.Config", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysUser", "User")
                        .WithMany("Configs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureClassification", b =>
                {
                    b.HasOne("SporeAccounting.Models.IncomeExpenditureClassification", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureRecord", b =>
                {
                    b.HasOne("SporeAccounting.Models.AccountBook", "AccountBook")
                        .WithMany("IncomeExpenditureRecords")
                        .HasForeignKey("AccountBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SporeAccounting.Models.Currency", "Currency")
                        .WithMany("IncomeExpenditureRecords")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SporeAccounting.Models.IncomeExpenditureClassification", "IncomeExpenditureClassification")
                        .WithMany("IncomeExpenditureRecords")
                        .HasForeignKey("IncomeExpenditureClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SporeAccounting.Models.SysUser", "User")
                        .WithMany("IncomeExpenditureRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountBook");

                    b.Navigation("Currency");

                    b.Navigation("IncomeExpenditureClassification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRoleUrl", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysRole", "Role")
                        .WithMany("RoleUrls")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SporeAccounting.Models.SysUrl", "Url")
                        .WithMany("RoleUrls")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUser", b =>
                {
                    b.HasOne("SporeAccounting.Models.SysRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SporeAccounting.Models.AccountBook", b =>
                {
                    b.Navigation("IncomeExpenditureRecords");
                });

            modelBuilder.Entity("SporeAccounting.Models.Currency", b =>
                {
                    b.Navigation("IncomeExpenditureRecords");
                });

            modelBuilder.Entity("SporeAccounting.Models.IncomeExpenditureClassification", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("IncomeExpenditureRecords");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysRole", b =>
                {
                    b.Navigation("RoleUrls");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUrl", b =>
                {
                    b.Navigation("RoleUrls");
                });

            modelBuilder.Entity("SporeAccounting.Models.SysUser", b =>
                {
                    b.Navigation("AccountBooks");

                    b.Navigation("Configs");

                    b.Navigation("IncomeExpenditureRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
